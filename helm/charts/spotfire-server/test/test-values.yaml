image:
  registry:
  pullPolicy: Always
  pullSecrets:
    - pullsecret

extraEnvVars:
  - name: HELLO
    value: world
extraEnvVarsCM: configmapname
extraEnvVarsSecret: secretname

ingress:
  enabled: true
  tls:
    - hosts:
      - www.example.com
      secretName: tlsSecretName
  hosts:
    - host: www.example.com
      paths:
      - path: /spotfire
        pathType: Prefix

extraVolumes:
  - name: empty
    emptyDir: {}
extraVolumeMounts:
  - name: empty
    mountPath: /empty

affinity:
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: security
          operator: In
          values:
          - S1
      topologyKey: topology.kubernetes.io/zone
nodeSelector:
  disktype: ssd
tolerations:
- key: "key1"
  operator: "Equal"
  value: "value1"
  effect: "NoSchedule"

cliPod:
  enabled: true
  logLevel: TRACE
  extraEnvVars:
    - name: HELLOCLIPOD
      value: worldcliPod
  extraEnvVarsCM: configmapnameclipod
  extraEnvVarsSecret: secretnameclipod
  extraVolumeMounts:
    - name: empty
      mountPath: /empty
  extraVolumes:
    - name: empty
      emptyDir: {}
  image:
    registry:
    pullPolicy: Never
    pullSecrets:
      - pullsecret
  extraInitContainers:
    - name: dummy-init
      image: busybox
      command: ['echo', "hey"]
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: security
            operator: In
            values:
            - S1
        topologyKey: topology.kubernetes.io/zone
  nodeSelector:
    disktype: ssd
  tolerations:
  - key: "key1"
    operator: "Equal"
    value: "value1"
    effect: "NoSchedule"
  podSecurityContext:
    fsGroup: 1234
    runAsUser: 1234
    runAsGroup: 1234
  securityContext:
    fsGroup: 9999
    runAsUser: 2000
    runAsGroup: 3000

configJob:
  logLevel: DEBUG
  extraEnvVars:
    - name: HELLOCLICONFIGJOB
      value: worldConfigJob
  extraEnvVarsCM: configmapnameconfigjob
  extraEnvVarsSecret: secretnameconfigjob
  extraVolumeMounts:
    - name: empty
      mountPath: /empty
  extraVolumes:
    - name: empty
      emptyDir: {}
  extraInitContainers:
    - name: dummy-init
      image: busybox
      command: ['echo', "hey"]
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: security
            operator: In
            values:
            - S1
        topologyKey: topology.kubernetes.io/zone
  nodeSelector:
    disktype: ssd
  tolerations:
  - key: "key1"
    operator: "Equal"
    value: "value1"
    effect: "NoSchedule"
  podSecurityContext:
    fsGroup: 4321
    runAsUser: 4321
    runAsGroup: 4321
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 0

serviceAccount:
  create: true
  name: "serviceaccountname"
  annotations:
    myAnnotation: myAnnotationValue

troubleshooting:
  jvm:
    heapDumpOnOutOfMemoryError:
      enabled: true

volumes:
  troubleshooting:
    persistentVolumeClaim:
      create: true

  libraryImportExport:
    persistentVolumeClaim:
      create: true

  customExt:
    existingClaim: "customextpvc"

  certificates:
    existingClaim: "customcertspvc"

  deployments:
    existingClaim: "deploymentsclaimname"


configuration:
  configurationScripts:
    - name: my_custom_script
      script: |
        echo "This is an example custom configuration tasks. "
        set-config-prop --name=lifecycle.changes-monitoring.draining.timeout-seconds --value=180 --configuration="${CONFIGURATION_FILE}" --bootstrap-config="${BOOTSTRAP_FILE}"
    - name: my_second_script
      script: |
        echo "This script will be executed after the one above."
        echo "Scripts are executed in the order in which they appear the values file."
  commandScripts:
    - name: mycommands_script
      script: create-user --bootstrap-config=bootstrap.xml --tool-password="${TOOL_PASSWORD}" --username="mynewuser" --password="password" --ignore-existing=true

spotfireConfig:
  debug: true
  cleanup:
    secureCookieAttributeForHttp: true
    sameSiteCookieAttributeForHttp: true
    cache:
      enabled: true

encryptionPassword: "encryption/password"

spotfireAdmin:
  username: "spotfireadmin"
  password: "secretpassword101"

database:
  bootstrap:
    databaseUrl: "jdbc://server/"
    driverClass: "org.postgresql.Driver"
    username: spotfireuser
    password: 'mypassword'
  create-db:
    enabled: true
    adminUsername: postgres 
    adminPassword: adminpassword
    databaseUrl: "jdbc://server/"

extraEnvVars:
  - name: HELLO
    value: world
extraEnvVarsCM: configmapname
extraEnvVarsSecret: secretname

extraInitContainers:
  - name: dummy-init
    image: busybox
    command: ['echo', "hey"]

fluentBitSidecar:
  securityContext:
    privileged: false
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 0

securityContext:
  privileged: false
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 0

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 0

spotfireServerJava:
  extraJavaOpts:
    - -Dsystem.property=value

site:
  publicAddress: "http://localhost/"

kedaAutoscaling:
  enabled: true
  pollingInterval: 30
  cooldownPeriod: 300
  minReplicas: 1
  maxReplicas: 4
  threshold: 8
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          policies:
          - type: Pods
            value: 1
            periodSeconds: 60
  spotfireConfig:
    prometheusServerAddress: http://prometheus-server.monitoring.svc.cluster.local
  triggers:
    - type: prometheus
      metadata:
        serverAddress: >
          '{{ required "The prometheus server address must be set for KEDA autoscaling configuration" .Values.kedaAutoscaling.spotfireConfig.prometheusServerAddress }}'
        metricName: spotfire_OS_OperatingSystem_ProcessCpuLoad
        threshold: >
          {{ required "The target threshold when to scale out must be specified" .Values.kedaAutoscaling.threshold | quote }}
        query: >
          {{ printf "sum(100*spotfire_OS_OperatingSystem_ProcessCpuLoad{app_kubernetes_io_component=\"server\", app_kubernetes_io_instance=\"%s\"})" .Release.Name | quote }}
        namespace: >
          {{ .Release.Namespace }}
    - type: prometheus
      metadata:
        serverAddress: >
          '{{ required "The prometheus server address must be set for KEDA autoscaling configuration" .Values.kedaAutoscaling.spotfireConfig.prometheusServerAddress }}'
        metricName: spotfire_OS_OperatingSystem_ProcessCpuLoad
        threshold: >
          {{ required "The target threshold when to scale out must be specified" .Values.kedaAutoscaling.threshold | quote }}
        query: >
          {{ printf "sum(100*spotfire_OS_OperatingSystem_ProcessCpuLoad{app_kubernetes_io_component=\"server\", app_kubernetes_io_instance=\"%s\"})" .Release.Name | quote }}
        namespace: >
          {{ .Release.Namespace }}
logging:
  logLevel: debug
